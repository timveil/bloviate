/*
 * Copyright (c) 2021 Tim Veil
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.bloviate.gen;

import com.fasterxml.jackson.annotation.JsonTypeInfo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Core interface for generating test data for database columns.
 * 
 * <p>DataGenerator implementations provide the ability to generate realistic
 * test data for specific data types, with support for both random generation
 * and seeded generation for reproducible results. Each generator handles
 * the complexities of working with JDBC PreparedStatements and ResultSets.
 * 
 * <p>Generators are created by {@link io.bloviate.ext.DatabaseSupport} implementations
 * based on column metadata, ensuring that generated values respect database
 * constraints such as size limits, nullable settings, and type-specific requirements.
 * 
 * <p>The interface supports both in-memory generation (via {@link #generate()})
 * and direct JDBC operations (via {@link #generateAndSet} and {@link #set}).
 * 
 * @param <T> the Java type of values generated by this generator
 * 
 * @author Tim Veil
 * @see io.bloviate.ext.DatabaseSupport
 * @see AbstractDataGenerator
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = "type")
public interface DataGenerator<T> {
    /**
     * Generates a random value of type T.
     * 
     * @return a generated value, may be null if the generator supports nullable columns
     */
    T generate();

    /**
     * Generates a value and returns its string representation.
     * 
     * @return the string representation of a generated value
     */
    String generateAsString();

    /**
     * Sets the random seed for reproducible data generation.
     * 
     * @param seed the random seed value
     */
    void setSeed(long seed);

    /**
     * Generates a value and sets it on a PreparedStatement parameter.
     * 
     * @param connection the database connection
     * @param statement the prepared statement to set the parameter on
     * @param parameterIndex the 1-based parameter index
     * @throws SQLException if the database operation fails
     */
    void generateAndSet(Connection connection, PreparedStatement statement, int parameterIndex) throws SQLException;

    /**
     * Sets a specific value on a PreparedStatement parameter.
     * 
     * @param connection the database connection
     * @param statement the prepared statement to set the parameter on
     * @param parameterIndex the 1-based parameter index
     * @param value the value to set
     * @throws SQLException if the database operation fails
     */
    void set(Connection connection, PreparedStatement statement, int parameterIndex, Object value) throws SQLException;

    /**
     * Retrieves a value from a ResultSet column.
     * 
     * @param resultSet the result set to read from
     * @param columnIndex the 1-based column index
     * @return the value from the result set, properly cast to type T
     * @throws SQLException if the database operation fails
     */
    T get(ResultSet resultSet, int columnIndex) throws SQLException;
}
